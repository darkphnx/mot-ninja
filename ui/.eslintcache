[{"/home/dan/src/vehicle-manager/ui/src/App.js":"1","/home/dan/src/vehicle-manager/ui/src/reportWebVitals.js":"2","/home/dan/src/vehicle-manager/ui/src/index.js":"3","/home/dan/src/vehicle-manager/ui/src/pages/VehicleList.js":"4","/home/dan/src/vehicle-manager/ui/src/pages/VehicleHistory.js":"5"},{"size":790,"mtime":1615127308261,"results":"6","hashOfConfig":"7"},{"size":362,"mtime":1609688725837,"results":"8","hashOfConfig":"7"},{"size":526,"mtime":1615049634759,"results":"9","hashOfConfig":"7"},{"size":4873,"mtime":1616503488242,"results":"10","hashOfConfig":"7"},{"size":4476,"mtime":1616503938176,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"2q73ik",{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"19","messages":"20","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"21","messages":"22","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23"},"/home/dan/src/vehicle-manager/ui/src/App.js",[],"/home/dan/src/vehicle-manager/ui/src/reportWebVitals.js",[],"/home/dan/src/vehicle-manager/ui/src/index.js",[],["24","25"],"/home/dan/src/vehicle-manager/ui/src/pages/VehicleList.js",["26"],"/home/dan/src/vehicle-manager/ui/src/pages/VehicleHistory.js",["27"],"import { useEffect, useState } from 'react';\nimport { useParams, Redirect } from \"react-router-dom\";\nimport Moment from 'react-moment';\n\nexport default function VehicleHistory() {\n  const { registrationNumber } = useParams();\n  const [vehicle, setVehicle] = useState(null);\n  const [redirectBack, setRedirectBack] = useState(false);\n\n  useEffect(()=> {\n    fetch('/vehicles', { 'method' : 'GET' })\n      .then(response => response.json())\n      .then(vehicles => findVehicle(vehicles))\n      .then(vehicle => setVehicle(vehicle))\n  }, [registrationNumber]);\n\n  function findVehicle(vehicles) {\n    return vehicles.find(vehicle => vehicle.RegistrationNumber === registrationNumber);\n  }\n\n  function MOTs() {\n    if(vehicle != null) {\n      return vehicle.MOTHistory.map(mot => <MOTTest key={mot.TestNumber} {...mot}/>);\n    } else {\n      return null;\n    }\n  }\n\n  function handleDeleteVehicle(e) {\n    fetch(`/vehicles/${vehicle.ID}`, {\n      method: 'DELETE',\n    }).then(()=> setRedirectBack(true));\n  }\n\n  if (redirectBack) {\n    return(<Redirect to='/' />);\n  }\n\n  return(\n    <div className='container'>\n      <div className='row title-row'>\n        <div className='column'>\n          <h1>{registrationNumber}</h1>\n          <MakeAndModel vehicle={vehicle}/>\n        </div>\n        <div className='column'>\n        </div>\n      </div>\n\n      {MOTs()}\n\n      <LastFetchedAt {...vehicle} />\n\n      <div className='row'>\n        <div className='column'>\n          <button className='button button-outline' onClick={handleDeleteVehicle}>Delete Vehicle</button>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nfunction MakeAndModel({ vehicle }) {\n  if(vehicle != null) {\n    console.log(vehicle)\n    return(<h3>{vehicle.Manufacturer} {vehicle.Model}</h3>)\n  } else {\n    return null;\n  }\n}\n\nconst commentTypes = {\n  'FAIL': 'Reasons for failure',\n  'DANGEROUS': 'Repair immediately (dangerous)',\n  'MAJOR': 'Repair immediately (major)',\n  'MINOR': 'Repair as soon as possible (minor)',\n  'ADVISORY': 'Monitor and repair if necessary (advisory)',\n  'PRS': 'Pass with Rectification',\n  'USER ENTERED': 'Other comments'\n};\nconst commentTypeOrder = Object.keys(commentTypes);\n\nfunction MOTTest({ Passed, OdometerReading, ExpiryDate, CompletedDate, RfrAndComments }) {\n  const commentsByType = (RfrAndComments || [])\n    .sort((a, b) => commentTypeOrder.indexOf(a.Type) - commentTypeOrder.indexOf(b.Type))\n    .reduce((accumulator, comment) => {\n      if (accumulator[comment.Type] === undefined) {\n        accumulator[comment.Type] = [];\n      }\n      accumulator[comment.Type].push(comment.Comment);\n\n      return accumulator;\n    }, {});\n\n  const commentComponents = Object.entries(commentsByType)\n    .map(([type, comments]) => {\n      return(<CommentsList type={type} comments={comments} key={type} />);\n    });\n\n  return(\n    <div className='row mot-test'>\n      <div className='column pass-fail'>\n        <PassOrFail Passed={Passed} />\n      </div>\n\n      <div className='column'>\n        <div className='row'>\n          <div className='column'>\n            <label>Test Date</label>\n            <Moment format='DD/MM/YYYY'>{CompletedDate}</Moment>\n          </div>\n          <div className='column'>\n            <label>Mileage</label>\n            {OdometerReading}\n          </div>\n          <div className='column'>\n            <label>Expiry Date</label>\n            <Moment format='DD/MM/YYYY'>{ExpiryDate}</Moment>\n          </div>\n        </div>\n\n        { commentComponents }\n      </div>\n    </div>\n  )\n}\n\nfunction PassOrFail({ Passed }) {\n  if (Passed) {\n    return(<h4 className='pass'>Pass</h4>);\n  } else {\n    return(<h4 className='fail'>Fail</h4>);\n  }\n}\n\nfunction CommentsList({ type, comments }) {\n  const commentComponents = comments.map((comment, i) => <Comment Comment={comment} key={`${type}-${i}`} />);\n\n  const title = commentTypes[type] || 'Other comments';\n\n  return(\n    <div className='row comments-list'>\n      <div className='column'>\n        <label>{title}</label>\n        <ul>\n          {commentComponents}\n        </ul>\n      </div>\n    </div>\n  )\n}\n\nfunction Comment({ Comment }) {\n  return(\n    <li>{Comment}</li>\n  );\n}\n\nfunction LastFetchedAt({ LastFetchedAt }) {\n  if(LastFetchedAt !== null) {\n    return(\n      <div className='row'>\n        <div className = 'column'>\n          <h5>Details last updated: <Moment format=\"DD/MM/YYYY HH:mm ZZ\">{LastFetchedAt}</Moment></h5>\n        </div>\n      </div>\n    );\n  } else {\n    return null;\n  }\n}\n",{"ruleId":"28","replacedBy":"29"},{"ruleId":"30","replacedBy":"31"},{"ruleId":"32","severity":1,"message":"33","line":110,"column":9,"nodeType":"34","endLine":110,"endColumn":61},{"ruleId":"35","severity":1,"message":"36","line":15,"column":6,"nodeType":"37","endLine":15,"endColumn":26,"suggestions":"38"},"no-native-reassign",["39"],"no-negated-in-lhs",["40"],"jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'findVehicle'. Either include it or remove the dependency array.","ArrayExpression",["41"],"no-global-assign","no-unsafe-negation",{"desc":"42","fix":"43"},"Update the dependencies array to be: [findVehicle, registrationNumber]",{"range":"44","text":"45"},[535,555],"[findVehicle, registrationNumber]"]